//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Torq.WPF.RoleService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Role", Namespace="http://schemas.datacontract.org/2004/07/Torq.Models.Objects")]
    [System.SerializableAttribute()]
    public partial class Role : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoleService.IRoleService")]
    public interface IRoleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/CreateRole", ReplyAction="http://tempuri.org/IRoleService/CreateRoleResponse")]
        Torq.WPF.RoleService.Role CreateRole(Torq.WPF.RoleService.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/CreateRole", ReplyAction="http://tempuri.org/IRoleService/CreateRoleResponse")]
        System.Threading.Tasks.Task<Torq.WPF.RoleService.Role> CreateRoleAsync(Torq.WPF.RoleService.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoleById", ReplyAction="http://tempuri.org/IRoleService/GetRoleByIdResponse")]
        Torq.WPF.RoleService.Role GetRoleById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoleById", ReplyAction="http://tempuri.org/IRoleService/GetRoleByIdResponse")]
        System.Threading.Tasks.Task<Torq.WPF.RoleService.Role> GetRoleByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoles", ReplyAction="http://tempuri.org/IRoleService/GetRolesResponse")]
        Torq.WPF.RoleService.Role[] GetRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/GetRoles", ReplyAction="http://tempuri.org/IRoleService/GetRolesResponse")]
        System.Threading.Tasks.Task<Torq.WPF.RoleService.Role[]> GetRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/RemoveRole", ReplyAction="http://tempuri.org/IRoleService/RemoveRoleResponse")]
        void RemoveRole(Torq.WPF.RoleService.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/RemoveRole", ReplyAction="http://tempuri.org/IRoleService/RemoveRoleResponse")]
        System.Threading.Tasks.Task RemoveRoleAsync(Torq.WPF.RoleService.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/UpdateRole", ReplyAction="http://tempuri.org/IRoleService/UpdateRoleResponse")]
        Torq.WPF.RoleService.Role UpdateRole(Torq.WPF.RoleService.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoleService/UpdateRole", ReplyAction="http://tempuri.org/IRoleService/UpdateRoleResponse")]
        System.Threading.Tasks.Task<Torq.WPF.RoleService.Role> UpdateRoleAsync(Torq.WPF.RoleService.Role role);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoleServiceChannel : Torq.WPF.RoleService.IRoleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoleServiceClient : System.ServiceModel.ClientBase<Torq.WPF.RoleService.IRoleService>, Torq.WPF.RoleService.IRoleService {
        
        public RoleServiceClient() {
        }
        
        public RoleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Torq.WPF.RoleService.Role CreateRole(Torq.WPF.RoleService.Role role) {
            return base.Channel.CreateRole(role);
        }
        
        public System.Threading.Tasks.Task<Torq.WPF.RoleService.Role> CreateRoleAsync(Torq.WPF.RoleService.Role role) {
            return base.Channel.CreateRoleAsync(role);
        }
        
        public Torq.WPF.RoleService.Role GetRoleById(int id) {
            return base.Channel.GetRoleById(id);
        }
        
        public System.Threading.Tasks.Task<Torq.WPF.RoleService.Role> GetRoleByIdAsync(int id) {
            return base.Channel.GetRoleByIdAsync(id);
        }
        
        public Torq.WPF.RoleService.Role[] GetRoles() {
            return base.Channel.GetRoles();
        }
        
        public System.Threading.Tasks.Task<Torq.WPF.RoleService.Role[]> GetRolesAsync() {
            return base.Channel.GetRolesAsync();
        }
        
        public void RemoveRole(Torq.WPF.RoleService.Role role) {
            base.Channel.RemoveRole(role);
        }
        
        public System.Threading.Tasks.Task RemoveRoleAsync(Torq.WPF.RoleService.Role role) {
            return base.Channel.RemoveRoleAsync(role);
        }
        
        public Torq.WPF.RoleService.Role UpdateRole(Torq.WPF.RoleService.Role role) {
            return base.Channel.UpdateRole(role);
        }
        
        public System.Threading.Tasks.Task<Torq.WPF.RoleService.Role> UpdateRoleAsync(Torq.WPF.RoleService.Role role) {
            return base.Channel.UpdateRoleAsync(role);
        }
    }
}
